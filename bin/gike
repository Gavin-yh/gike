#!/usr/bin/env node

const path = require('path')
const program = require("commander");
const Printer = require("@darkobits/lolcatjs");
const chalk = require("chalk");
const packagePath = path.join(__dirname, '../package.json')
const argv = require('minimist')(process.argv.slice(2));
const command = argv._[0];
const defaultMode = command === 'build' ? 'production' : 'development';

const input = [
    '    /\\_____/\\',
    '   /  o   o  \\',
    '  ( ==  ^  == )',
    '   )         (',
    '  (           )',
    ' ( (  )   (  ) )',
    '(__(__)___(__)__)',
].join('\n')

function helpMsg() {
    console.log(Printer.default.fromString( `
Usage: gike [command] [args] [--options]

Commands:
  gike create          Create the project
  gike start           Running the project in the development environment
  gike build           Build target directory.
  gike logo            Show project Logo
  gike deploy          Deploy project

Options:
  --help, -h           [boolean] show help
  --version, -v        [boolean] show version
  --name, -n           [string] the project name
  --mode, -m           [string]  specify env mode (default: 'development' for dev, 'production' for build)
`))
}


(function() {
    const { help, h, mode, m, version, v } = argv;
    const envMode = mode || m || defaultMode
    const options = resolveOptions(envMode)
    if (help || h) {
        helpMsg()
        return;
    }
    else if (version || v) {
        console.log(
            chalk.magenta(`gike ${require(`${packagePath}`).version}`)
        )
    }
    else if (options.command === 'create') {
        require('../lib/create')(options)
    }
    else if (options.command === 'start') {
        require('../lib/start')(options)
    }
    else if (options.command === 'build'){
        require('../lib/build')(options)
    }
    else if (options.command === 'deploy') {
        console.log(
            Printer.default.fromString(input)
        )
    }
    else if (options.command === 'logo') {
        console.log(
            Printer.default.fromString(input)
        )
    }
})()

function resolveOptions(mode) {
    const commandList = argv._
    argv.mode = mode

    Object.keys(argv).forEach(key => {
        if (argv[key] === 'false') {
            argv[key] = false
        }

        if(argv[key] === 'true') {
            argv[key] = true
        }
    })

    //command
    if(commandList[0]) {
        argv.command = commandList[0]
        argv.commandArg = commandList[1]
    }

    return argv
}
